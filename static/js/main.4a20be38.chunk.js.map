{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","createLand","mapH","mapW","map","i","push","Array","fill","wall","j","chance","Math","floor","random","growWall","App","state","className","React","Component","Map","props","handleKeyPress","e","newX","playerX","newY","playerY","key","viewRange","borders","left","top","right","bottom","shownMap","slice","setState","console","log","forceUpdate","types","squareSize","this","squares","squareStyle","height","width","length","type","style","mapStyle","gridTemplateColumns","tabIndex","onKeyDown","Square","nextProps","color","background","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a20be38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nlet createLand=(mapH=10, mapW=30)=>{\r\n  let map=[];\r\n  for(let i=0; i<mapH; i++){\r\n    map.push(new Array(mapW).fill(0))\r\n  }\r\n  \r\n  function wall(i,j,chance){\r\n    if(i<0 || j<0 || i>=mapH || j>=mapW) return 0;\r\n    if(map[i][j]===0){\r\n      if(Math.floor(Math.random() * chance)<10){\r\n        map[i][j]=1;\r\n        return 1;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  function growWall(i,j,chance=10){\r\n    let mod=20;//the bigger this value is the smaller the wall clusters are\r\n    if(wall(i-1,j,chance))\r\n      growWall(i-1,j,chance+mod);\r\n    if(wall(i+1,j,chance))\r\n      growWall(i+1,j,chance+mod);\r\n    if(wall(i,j-1,chance))\r\n      growWall(i,j-1,chance+mod);\r\n    if(wall(i,j+1,chance))\r\n      growWall(i,j+1,chance+mod);\r\n  }\r\n\r\n  for(let i=0;i<mapH;i++){\r\n    for(let j=0;j<mapW;j++){\r\n      if(Math.floor(Math.random() * 40)===0){\r\n        map[i][j]=1;\r\n        growWall(i,j)\r\n      }\r\n    }\r\n  }\r\n  \r\n  return map;\r\n}\r\n\r\n\r\n\r\n\r\nlet createDungeon=(mapH=10, mapW=10, nOfTunnels=10, maxL=5, turns=5)=>{\r\n  let map=[];\r\n  for(let i=0; i<mapH; i++){\r\n    map.push(new Array(mapW).fill(0))\r\n  }\r\n  \r\n  \r\n  let createTunnel=(startL, startW, maxL, turns)=>{\r\n    let l=startL, w=startW;\r\n    for(let i=0;i<turns;i++){\r\n      let x=0, y=0;\r\n      switch(Math.floor(Math.random()*4)){\r\n        case 0:\r\n          y=1;\r\n          break;\r\n        case 1:\r\n          x=1;\r\n          break;\r\n        case 2:\r\n          y=-1;\r\n          break;\r\n        case 3:\r\n          x=-1;\r\n          break;\r\n      }\r\n      let length=Math.floor(Math.random()*maxL)+1;\r\n      \r\n      for(let i=0;i<length;i++){\r\n        l+=y;\r\n        w+=x;\r\n        map[l][w]=1;\r\n      }\r\n    }\r\n  }\r\n  let startL=mapH/2-1;\r\n  let startW=mapW/2-1;\r\n  map[startL][startW]=1;\r\n  createTunnel(startL, startW, maxL, turns);\r\n  \r\n  return map;\r\n}\r\n\r\nclass App extends React.Component{\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      \r\n    };\r\n  }\r\n  \r\n  render(){\r\n    \r\n    return(\r\n      <div className=\"app\">\r\n        <Map mapW={20} mapH={20}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Map extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n\t\t\r\n\t\t\r\n\t\tlet playerX=Math.floor(this.props.mapW/2);\r\n\t\tlet playerY=Math.floor(this.props.mapH/2);\r\n\t\tconst viewRange=4;\r\n\t\t\r\n\t\tlet borders={\t\t\t//borders indicate the last visible squares, and are included in the visible map\r\n\t\t\tleft:(playerX<viewRange)?0:(playerX-viewRange),\r\n\t\t\ttop:(playerY<viewRange)?0:(playerY-viewRange)\r\n\t\t}\r\n\t\t\r\n\t\tborders.right=borders.left+viewRange*2;\r\n\t\tborders.bottom=borders.top+viewRange*2;\r\n\t\t\r\n\t\tif(borders.right>this.props.mapW-1) borders.right=this.props.mapW-1;\r\n\t\tif(borders.bottom>this.props.mapH-1) borders.bottom=this.props.mapH-1;\r\n\t\t\r\n\t\tlet map=createLand(this.props.mapH, this.props.mapW);\r\n\t\tlet shownMap=[]\r\n\t\tfor(let i=borders.top;i<=borders.bottom;i++){\r\n\t\t\tshownMap.push(map[i].slice(borders.left,borders.right+1))\r\n\t\t}\r\n\t\t\r\n    this.state={\r\n      map:map,\r\n\t\t\tshownMap:shownMap,\r\n\t\t\ttypes:[\"grass\",\"rock\",\"ground\"],\r\n\t\t\tsquareSize:40,\r\n\t\t\tviewRange:viewRange,\r\n\t\t\tplayerX:playerX,\r\n\t\t\tplayerY:playerY\r\n    }\r\n  }\r\n\t\r\n\thandleKeyPress=(e)=>{\r\n\t\tlet newX=this.state.playerX;\r\n\t\tlet newY=this.state.playerY;\r\n\t\tswitch(e.key){\r\n\t\t\tcase 'ArrowLeft':\r\n\t\t\t\tnewX--;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ArrowUp':\r\n\t\t\t\tnewY--;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ArrowRight':\r\n\t\t\t\tnewX++;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ArrowDown':\r\n\t\t\t\tnewY++;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn 0;\r\n\t\t}\r\n\t\t\r\n\t\tconst viewRange=this.state.viewRange;\r\n\t\t\r\n\t\tlet borders={\t\t\t//borders indicate the last visible squares, and are included in the visible map\r\n\t\t\tleft:(newX<viewRange)?0:(newX-viewRange),\r\n\t\t\ttop:(newY<viewRange)?0:(newY-viewRange)\r\n\t\t}\r\n\t\t\r\n\t\tborders.right=borders.left+viewRange*2;\r\n\t\tborders.bottom=borders.top+viewRange*2;\r\n\t\t\r\n\t\tif(borders.right>this.props.mapW-1) borders.right=this.props.mapW-1;\r\n\t\tif(borders.bottom>this.props.mapH-1) borders.bottom=this.props.mapH-1;\r\n\t\t\r\n\t\tlet map=this.state.map;\r\n\t\tlet shownMap=[]\r\n\t\tfor(let i=borders.top;i<=borders.bottom;i++){\r\n\t\t\tshownMap.push(map[i].slice(borders.left,borders.right+1))\r\n\t\t}\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\tplayerX:newX,\r\n\t\t\tplayerY:newY,\r\n\t\t\tshownMap:shownMap\r\n\t\t},()=>{\r\n\t\t\tconsole.log(this.state.shownMap);\r\n\t\t\tthis.forceUpdate();\r\n\t\t\t})\r\n\t}\r\n  \r\n  render(){\r\n\t\tlet shownMap=this.state.shownMap;\r\n    //let map=this.state.map;\r\n    let squares=[];\r\n\t\tlet squareStyle={\r\n\t\t\theight:this.state.squareSize+\"px\",\r\n\t\t\twidth:this.state.squareSize+\"px\"\r\n\t\t}\r\n    for(let i=0;i<shownMap.length;i++){\r\n      for(let j=0;j<shownMap[i].length;j++){\r\n        squares.push(<Square type={this.state.types[shownMap[i][j]]} style={squareStyle} key={i+\" \"+j}/>)\r\n      }\r\n    }\r\n    let mapStyle={\r\n      gridTemplateColumns: \"repeat(\"+shownMap[0].length+\", \"+(this.state.squareSize+2)+\"px)\",\r\n\t\t\twidth:(shownMap[0].length*(this.state.squareSize+2))+\"px\",\r\n\t\t\theight:(shownMap.length*(this.state.squareSize+2))+\"px\"\r\n    };\r\n\t\t\r\n    return(\r\n      <div className=\"gameBoard\" style={mapStyle} tabIndex=\"0\"  onKeyDown={this.handleKeyPress}>\r\n        {squares}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Square extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      type:this.props.type\r\n    };\r\n  }\r\n  \r\n\tcomponentWillReceiveProps(nextProps) {\r\n\t\tthis.setState({ type: nextProps.type });  \r\n\t}\r\n\t\r\n  render(){\r\n    let color;\r\n    switch(this.state.type){\r\n      case \"ground\":\r\n        color=\"#9c7711\"\r\n        break;\r\n      case \"grass\":\r\n        color=\"#7ec850\"\r\n        break;\r\n      case \"rock\":\r\n        color=\"#5c4e29\"\r\n        break;\r\n      default:\r\n        color=\"#000000\"\r\n    }\r\n    let style=this.props.style;\r\n\t\r\n    style={\r\n\t  height:this.props.style.height,\r\n      background:color\r\n    }\r\n    \r\n    \r\n    return(\r\n      <div className=\"square\" style={style}/>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}