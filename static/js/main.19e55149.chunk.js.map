{"version":3,"sources":["Map.js","EntityInfo.js","EndScreen.js","Tutorial.js","mapHandler.js","reducer.js","App.js","index.js"],"names":["Map","props","handleKeyDown","e","movementEnabled","key","dispatch","type","id","setTimeout","handleSquareClick","mapRef","React","createRef","this","current","focus","squares","squareStyle","height","squareSize","width","i","shownMap","length","j","square","hasOwnProperty","occupied","enemies","push","style","onClick","mapStyle","gridTemplateColumns","className","tabIndex","onKeyDown","ref","Component","Square","state","nextProps","setState","background","connect","maps","currentMapId","EntityInfo","bars","icon","entityIsPlayer","value","entity","exp","maxValue","lvl","barType","entityType","health","maxHealth","entityName","toUpperCase","slice","group","src","alt","atk","def","Bar","relativeValue","shownInfoId","player","enemy","gameState","Tutorial","Terrain","canMoveThrough","Error","createValley","mapH","mapW","land","newStrip","growWall","chance","wall","Math","floor","random","reducedChance","pathFinder","start","end","maxDistance","map","JSON","parse","stringify","y","x","prev","borderSquares","getPath","ele","path","newBorders","generateMap","landType","enemyNumbers","enemyStats","automaton","expBounty","ghoul","dryad","img","Image","Object","coords","generateCoords","recursiveCounter","quantity","generateShownMap","borders","left","viewRange","top","right","bottom","initializeState","initialState","foundPath","reducer","action","moveEntity","newPlayer","newX","newY","adversary","adversaryId","result","enemyHealth","dmg1","dmg2","won","battle","expCap","newMaps","assign","newState","newGameState","forEach","store","createStore","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.19e55149.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./css/Map.css\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToProps = state => {\r\n  return {\r\n    squareSize: state.squareSize,\r\n    shownMap: state.shownMap,\r\n    enemies: state.maps[state.currentMapId].enemies,\r\n    movementEnabled: state.movementEnabled\r\n  };\r\n};\r\n\r\nclass Map extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.mapRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.mapRef.current.focus();\r\n  }\r\n\r\n  handleKeyDown = e => {\r\n    if (\r\n      this.props.movementEnabled &&\r\n      (e.key == \"ArrowLeft\" ||\r\n        e.key == \"ArrowUp\" ||\r\n        e.key == \"ArrowDown\" ||\r\n        e.key == \"ArrowRight\")\r\n    ) {\r\n      this.props.dispatch({\r\n        type: \"KEYDOWN\",\r\n        key: e.key,\r\n        id: \"player\"\r\n      });\r\n      setTimeout(\r\n        () =>\r\n          this.props.dispatch({\r\n            type: \"ENEMYTURN\"\r\n          }),\r\n        100\r\n      );\r\n    }\r\n  };\r\n\r\n  handleSquareClick = id => {\r\n    if (id == null) return;\r\n    this.props.dispatch({\r\n      type: \"SHOWINFO\",\r\n      id: id\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let squares = [];\r\n    let squareStyle = {\r\n      height: this.props.squareSize + \"px\",\r\n      width: this.props.squareSize + \"px\"\r\n    };\r\n\r\n    for (let i = 0; i < this.props.shownMap.length; i++) {\r\n      for (let j = 0; j < this.props.shownMap[i].length; j++) {\r\n        let square = this.props.shownMap[i][j];\r\n        let type;\r\n        if (square.hasOwnProperty(\"occupied\")) {\r\n          if (square.occupied == \"player\") {\r\n            type = \"player\";\r\n          } else {\r\n            type = this.props.enemies[square.occupied].type;\r\n          }\r\n          squares.push(\r\n            <Square\r\n              type={type}\r\n              style={squareStyle}\r\n              key={i + \" \" + j}\r\n              onClick={() => this.handleSquareClick(square.occupied)}\r\n            />\r\n          );\r\n        } else {\r\n          type = square.type;\r\n          squares.push(\r\n            <Square type={type} style={squareStyle} key={i + \" \" + j} />\r\n          );\r\n        }\r\n      }\r\n    }\r\n    let mapStyle = {\r\n      gridTemplateColumns:\r\n        \"repeat(\" +\r\n        this.props.shownMap[0].length +\r\n        \", \" +\r\n        this.props.squareSize +\r\n        \"px)\",\r\n      width: this.props.shownMap[0].length * this.props.squareSize + \"px\",\r\n      height: this.props.shownMap.length * this.props.squareSize + \"px\"\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className=\"map\"\r\n        style={mapStyle}\r\n        tabIndex=\"0\"\r\n        onKeyDown={this.handleKeyDown}\r\n        ref={this.mapRef}\r\n      >\r\n        {squares}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Square extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      type: this.props.type\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState({ type: nextProps.type });\r\n  }\r\n\r\n  render() {\r\n    let style = this.props.style;\r\n\r\n    style = {\r\n      height: this.props.style.height\r\n    };\r\n    switch (this.state.type) {\r\n      case \"ground\":\r\n        style.background = \"#9c7711\";\r\n        break;\r\n      case \"grass\":\r\n        style.background = \"#7ec850\";\r\n        break;\r\n      case \"rock\":\r\n        style.background = \"#5c4e29\";\r\n        break;\r\n      case \"player\":\r\n        style.background = \"#4287f5\";\r\n        break;\r\n      case \"ghoul\":\r\n        style.background = \"#6e3434\";\r\n        break;\r\n      case \"automaton\":\r\n        style.background = \"#b51616\";\r\n        break;\r\n      case \"dryad\":\r\n        style.background = \"#214a26\";\r\n        break;\r\n      default:\r\n        style.background = \"#000000\";\r\n    }\r\n\r\n    return (\r\n      <div className=\"square\" style={style} onClick={this.props.onClick} />\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Map);\r\n","import React from \"react\";\r\nimport \"./css/EntityInfo.css\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToProps = state => {\r\n  if (\r\n    state.shownInfoId == \"player\" ||\r\n    state.shownInfoId == null ||\r\n    state.maps[state.currentMapId].enemies[state.shownInfoId] == \"dead\"\r\n  ) {\r\n    return { player: state.player };\r\n  } else {\r\n    return {\r\n      player: state.player,\r\n      enemy: state.maps[state.currentMapId].enemies[state.shownInfoId]\r\n    };\r\n  }\r\n};\r\n\r\nlet ShownEntities = props => {\r\n  if (props.enemy == null) {\r\n    return (\r\n      <div className=\"infoContainer\">\r\n        <EntityInfo entity={props.player} type=\"player\" group=\"player\" />\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"infoContainer\">\r\n        <EntityInfo entity={props.player} type=\"player\" group=\"player\" />\r\n        <EntityInfo\r\n          entity={props.enemy}\r\n          type={props.enemy.type}\r\n          group=\"enemy\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nlet EntityInfo = props => {\r\n  let bars = [];\r\n  let icon = `Portraits/${props.type}.gif`;\r\n  let entityIsPlayer = props.type == \"player\";\r\n  if (entityIsPlayer) {\r\n    bars.push(\r\n      <Bar\r\n        value={props.entity.exp}\r\n        maxValue={props.entity.lvl * 100}\r\n        barType=\"Exp\"\r\n        entityType=\"player\"\r\n      />\r\n    ); //exp needed for lvl up is level*100\r\n  }\r\n\r\n  bars.push(\r\n    <Bar\r\n      value={props.entity.health}\r\n      maxValue={props.entity.maxHealth}\r\n      barType=\"HP\"\r\n      entityType={entityIsPlayer ? \"player\" : \"enemy\"}\r\n    />\r\n  );\r\n\r\n  let entityName = null;\r\n  if (!entityIsPlayer) {\r\n    entityName = <h1>{props.type[0].toUpperCase() + props.type.slice(1)}</h1>;\r\n  }\r\n\r\n  return (\r\n    <div className={\"info \" + props.group}>\r\n      <img className=\"icon\" src={icon} alt={entityName+\" portrait\"} />\r\n      {entityName}\r\n      {bars}\r\n      <h2>Atk:{props.entity.atk}</h2>\r\n      <h2>Def:{props.entity.def}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nlet Bar = props => {\r\n  let relativeValue = `${(props.value / props.maxValue) * 100}%`;\r\n  return (\r\n    <div className={`bar ${props.entityType + props.barType}`}>\r\n      <div className=\"barValue\">\r\n        <h2>{`${props.barType}: ${props.value}`}</h2>\r\n      </div>\r\n      <span style={{ width: relativeValue }}></span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps)(ShownEntities);\r\n","import React from \"react\";\r\nimport \"./css/EndScreen.css\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToProps = state => {\r\n  return {\r\n    gameState: state.gameState\r\n  };\r\n};\r\n\r\nlet EndScreen =(props) => {\r\n    return (\r\n      <div className=\"EndScreen\" style={(props.gameState!==\"playing\")?{\"z-index\":\"100\",\"opacity\":\"1\"}:{\"z-index\":\"-1\",\"opacity\":\"0\"}}>\r\n        <h1>{props.gameState}</h1>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps)(EndScreen);\r\n","import React from \"react\";\r\nimport \"./css/Tutorial.css\";\r\n\r\nconst Tutorial = props => {\r\n  return (\r\n    <div className=\"Tutorial\">\r\n      <div>\r\n        <div className=\"imgContainer\"><img src=\"Icons/arrows-icon.png\" alt=\"Arrow keys icon\"/></div>\r\n        <p>Use the arrow keys to move</p>\r\n      </div>\r\n      <div>\r\n        <div className=\"imgContainer\"><img src=\"Icons/mouse-icon.png\" alt=\"Mouse icon\"/></div>\r\n        <p>Click on enemies to show their stats</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tutorial;\r\n","class Terrain {\r\n  constructor(type) {\r\n    this.type = type;\r\n    switch (type) {\r\n      case \"grass\":\r\n      case \"ground\":\r\n        this.canMoveThrough = true;\r\n        break;\r\n      case \"rock\":\r\n        this.canMoveThrough = false;\r\n        break;\r\n      default:\r\n        throw new Error(type + \" is not a valid terrain type\");\r\n    }\r\n  }\r\n}\r\n\r\nlet createValley = (mapH = 20, mapW = 20) => {\r\n  let land = [];\r\n  //initialize valley as having only grass terrain\r\n  for (let i = 0; i < mapH; i++) {\r\n    let newStrip = [];\r\n    for (let j = 0; j < mapW; j++) {\r\n      newStrip.push(new Terrain(\"grass\"));\r\n    }\r\n    land.push(newStrip);\r\n  }\r\n  //!!IMPORTANT!! THIS FUNCTION MODIFIES THE LAND ARRAY\r\n  let growWall = (i, j, chance = 100) => {\r\n    let wall = (i, j, chance) => {\r\n      if (i < 0 || j < 0 || i >= mapH || j >= mapW) return false;\r\n      if (land[i][j].type === \"grass\") {\r\n        if (Math.floor(Math.random() * 100) < chance) {\r\n          land[i][j] = new Terrain(\"rock\");\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    };\r\n\r\n    let reducedChance = chance-30;\r\n    if (wall(i - 1, j, chance)) growWall(i - 1, j, reducedChance);\r\n    if (wall(i + 1, j, chance)) growWall(i + 1, j, reducedChance);\r\n    if (wall(i, j - 1, chance)) growWall(i, j - 1, reducedChance);\r\n    if (wall(i, j + 1, chance)) growWall(i, j + 1, reducedChance);\r\n  };\r\n\r\n\r\n  //generate rock clusters\r\n  for (let i = 0; i < mapH; i++) {\r\n    for (let j = 0; j < mapW; j++) {\r\n      if (Math.floor(Math.random() * 40) === 0) {\r\n        land[i][j] = new Terrain(\"rock\");\r\n        growWall(i, j);\r\n      }\r\n    }\r\n  }\r\n\r\n  return land;\r\n};\r\n\r\nlet pathFinder = (land, start, end, maxDistance) => {\r\n  let map = JSON.parse(JSON.stringify(land));\r\n  map[end.y][end.x].prev = \"end\";\r\n  let borderSquares = [end];\r\n\r\n  let getPath = ele => {\r\n    let path = [];\r\n    path.push(map[ele.y][ele.x].prev);\r\n\r\n    let i = 0;\r\n    let x = ele.x;\r\n    let y = ele.y;\r\n    while (map[y][x].prev !== \"end\" && i < maxDistance) {\r\n      switch (path[path.length - 1]) {\r\n        case \"ArrowDown\": {\r\n          y++;\r\n          break;\r\n        }\r\n        case \"ArrowLeft\": {\r\n          x--;\r\n          break;\r\n        }\r\n        case \"ArrowUp\": {\r\n          y--;\r\n          break;\r\n        }\r\n        case \"ArrowRight\": {\r\n          x++;\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(`Unexpected command stored on path[${path.length - 1}] in getPath functon`)\r\n        }\r\n      }\r\n      i++;\r\n      path.push(map[y][x].prev);\r\n    }\r\n    if (i > maxDistance) {\r\n      throw new Error(\"Path is longer than max distance\");\r\n    }\r\n    return path;\r\n  };\r\n\r\n  for (let i = 0; i < maxDistance; i++) {\r\n    let newBorders = [];\r\n    for (let i = 0; i < borderSquares.length; i++) {\r\n      let ele = borderSquares[i];\r\n      if (ele.y + 1 == start.y && ele.x == start.x) {\r\n        map[ele.y + 1][ele.x].prev = \"ArrowUp\";\r\n        return getPath(start);\r\n      }\r\n      if (ele.y - 1 == start.y && ele.x == start.x) {\r\n        map[ele.y - 1][ele.x].prev = \"ArrowDown\";\r\n        return getPath(start);\r\n      }\r\n      if (ele.y == start.y && ele.x + 1 == start.x) {\r\n        map[ele.y][ele.x + 1].prev = \"ArrowLeft\";\r\n        return getPath(start);\r\n      }\r\n      if (ele.y == start.y && ele.x - 1 == start.x) {\r\n        map[ele.y][ele.x - 1].prev = \"ArrowRight\";\r\n        return getPath(start);\r\n      }\r\n\r\n      if (\r\n        ele.y + 1 < map.length &&\r\n        !map[ele.y + 1][ele.x].hasOwnProperty(\"prev\") &&\r\n        map[ele.y + 1][ele.x].canMoveThrough &&\r\n        !map[ele.y + 1][ele.x].hasOwnProperty(\"occupied\")\r\n      ) {\r\n        map[ele.y + 1][ele.x].prev = \"ArrowUp\";\r\n        newBorders.push({ y: ele.y + 1, x: ele.x });\r\n      }\r\n      if (\r\n        ele.y - 1 >= 0 &&\r\n        !map[ele.y - 1][ele.x].hasOwnProperty(\"prev\") &&\r\n        map[ele.y - 1][ele.x].canMoveThrough &&\r\n        !map[ele.y - 1][ele.x].hasOwnProperty(\"occupied\")\r\n      ) {\r\n        map[ele.y - 1][ele.x].prev = \"ArrowDown\";\r\n        newBorders.push({ y: ele.y - 1, x: ele.x });\r\n      }\r\n      if (\r\n        ele.x + 1 < map[0].length &&\r\n        !map[ele.y][ele.x + 1].hasOwnProperty(\"prev\") &&\r\n        map[ele.y][ele.x + 1].canMoveThrough &&\r\n        !map[ele.y][ele.x + 1].hasOwnProperty(\"occupied\")\r\n      ) {\r\n        map[ele.y][ele.x + 1].prev = \"ArrowLeft\";\r\n        newBorders.push({ y: ele.y, x: ele.x + 1 });\r\n      }\r\n      if (\r\n        ele.x - 1 >= 0 &&\r\n        !map[ele.y][ele.x - 1].hasOwnProperty(\"prev\") &&\r\n        map[ele.y][ele.x - 1].canMoveThrough &&\r\n        !map[ele.y][ele.x - 1].hasOwnProperty(\"occupied\")\r\n      ) {\r\n        map[ele.y][ele.x - 1].prev = \"ArrowRight\";\r\n        newBorders.push({ y: ele.y, x: ele.x - 1 });\r\n      }\r\n    }\r\n    borderSquares = newBorders;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nlet generateMap = (landType = \"valley\", mapH = 20, mapW = 20, enemyNumbers) => {\r\n  const enemyStats = {\r\n    automaton: {\r\n      maxHealth: 150,\r\n      health: 150,\r\n      atk: 11,\r\n      def: 4,\r\n      expBounty: 60\r\n    },\r\n    ghoul: {\r\n      maxHealth: 100,\r\n      health: 100,\r\n      atk: 12,\r\n      def: 2,\r\n      expBounty: 70\r\n    },\r\n    dryad: {\r\n      maxHealth: 70,\r\n      health: 70,\r\n      atk: 14,\r\n      def: 0,\r\n      expBounty: 80\r\n    }\r\n  };\r\n\r\n  for(let enemy of enemyNumbers){\r\n    let img= new Image();\r\n    img.src = `Portraits/${enemy.type}.gif`;\r\n  }\r\n\r\n  let map = new Object();\r\n\r\n  switch (landType) {\r\n    case \"valley\": {\r\n      map.land = createValley(mapH, mapW);\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error(landType + \" is not a valid land type\");\r\n    }\r\n  }\r\n\r\n  map.enemies = [];\r\n\r\n  for (let i = 0; i < enemyNumbers.length; i++) {\r\n    for (let j = 0; j < enemyNumbers[i].quantity; j++) {\r\n      let generateCoords = (recursiveCounter = 0) => {\r\n        let coords = {\r\n          x: Math.floor(Math.random() * map.land[0].length),\r\n          y: Math.floor(Math.random() * map.land.length)\r\n        };\r\n\r\n        if (\r\n          map.land[coords.y][coords.x].canMoveThrough &&\r\n          !map.land[coords.y][coords.x].hasOwnProperty(\"occupied\")\r\n        ) {\r\n          return coords;\r\n        } else {\r\n          if (recursiveCounter < 100)\r\n            return generateCoords(recursiveCounter + 1);\r\n          else throw new Error(\"could not generate coordinates\");\r\n        }\r\n      };\r\n\r\n      let enemy = {\r\n        maxHealth: enemyStats[enemyNumbers[i].type].maxHealth,\r\n        health: enemyStats[enemyNumbers[i].type].health,\r\n        atk: enemyStats[enemyNumbers[i].type].atk,\r\n        def: enemyStats[enemyNumbers[i].type].def,\r\n        expBounty: enemyStats[enemyNumbers[i].type].expBounty,\r\n        type: enemyNumbers[i].type,\r\n        id: map.enemies.length,\r\n        coords: generateCoords()\r\n      };\r\n      map.enemies.push(enemy);\r\n      map.land[enemy.coords.y][enemy.coords.x].occupied = enemy.id;\r\n    }\r\n  }\r\n  return map;\r\n};\r\n\r\nlet generateShownMap = (state, currentMapId = 0) => {\r\n  let borders = {\r\n    //borders indicate the last visible squares, and are included in the visible map\r\n    left: state.player.coords.x - state.viewRange,\r\n    top: state.player.coords.y - state.viewRange,\r\n    right: state.player.coords.x + state.viewRange,\r\n    bottom: state.player.coords.y + state.viewRange\r\n  };\r\n\r\n  let mapW = state.maps[currentMapId].land[0].length;\r\n  let mapH = state.maps[currentMapId].land.length;\r\n\r\n  if (mapW > state.viewRange * 2 + 1) {\r\n    if (borders.left < 0) {\r\n      borders.right = state.viewRange * 2;\r\n      borders.left = 0;\r\n    }\r\n\r\n    if (borders.right > mapW - 1) {\r\n      borders.right = mapW - 1;\r\n      borders.left = borders.right - state.viewRange * 2;\r\n    }\r\n  } else {\r\n    borders.left = 0;\r\n    borders.right = mapW - 1;\r\n  }\r\n\r\n  if (mapH > state.viewRange * 2 + 1) {\r\n    if (borders.top < 0) {\r\n      borders.bottom = state.viewRange * 2;\r\n      borders.top = 0;\r\n    }\r\n\r\n    if (borders.bottom > mapH - 1) {\r\n      borders.bottom = mapH - 1;\r\n      borders.top = borders.bottom - state.viewRange * 2;\r\n    }\r\n  } else {\r\n    borders.top = 0;\r\n    borders.bottom = mapH - 1;\r\n  }\r\n\r\n  let shownMap = [];\r\n  for (let y = borders.top; y <= borders.bottom; y++) {\r\n    let newStrip = [];\r\n    for (let x = borders.left; x <= borders.right; x++) {\r\n      let square = state.maps[currentMapId].land[y][x];\r\n      newStrip.push(square);\r\n    }\r\n    shownMap.push(newStrip);\r\n  }\r\n\r\n  return shownMap;\r\n};\r\n\r\nexport {pathFinder, generateMap, generateShownMap};\r\n","import {pathFinder, generateMap, generateShownMap} from \"./mapHandler\"\r\n\r\nconst initializeState = (mapW = 30, mapH = 30) => {\r\n  let foundPath = false;\r\n  let initialState;\r\n\r\n  while (!foundPath) {\r\n    //we check that every enemy is reachable by the player\r\n    let player = {\r\n      exp: 0,\r\n      lvl: 1,\r\n      maxHealth: 100,\r\n      health: 100,\r\n      atk: 10,\r\n      def: 10,\r\n      id: \"player\"\r\n    };\r\n\r\n    let enemyNumbers = [\r\n      {\r\n        quantity: 7,\r\n        type: \"automaton\"\r\n      },\r\n      {\r\n        quantity: 6,\r\n        type: \"ghoul\"\r\n      },\r\n      {\r\n        quantity: 5,\r\n        type: \"dryad\"\r\n      }\r\n    ];\r\n\r\n    let map = generateMap(\"valley\", mapH, mapW, enemyNumbers);\r\n\r\n    let generateCoords = (recursiveCounter = 0) => {\r\n      let coords = {\r\n        x: Math.floor(Math.random() * map.land[0].length),\r\n        y: Math.floor(Math.random() * map.land.length)\r\n      };\r\n\r\n      if (\r\n        map.land[coords.y][coords.x].canMoveThrough &&\r\n        !map.land[coords.y][coords.x].hasOwnProperty(\"occupied\")\r\n      ) {\r\n        return coords;\r\n      } else {\r\n        if (recursiveCounter < 50) return generateCoords(recursiveCounter + 1);\r\n        else throw new Error(\"could not generate coordinates\");\r\n      }\r\n    };\r\n\r\n    player.coords = generateCoords();\r\n\r\n    for (let i = 0; i < map.enemies.length; i++) {\r\n      foundPath = pathFinder(\r\n        map.land,\r\n        player.coords,\r\n        map.enemies[i].coords,\r\n        (mapH * mapW) / 2\r\n      );\r\n      if (foundPath === false) break;\r\n    }\r\n\r\n    initialState = {\r\n      gameState: \"playing\",\r\n      maps: [map],\r\n      squareSize: 40,\r\n      viewRange: 5,\r\n      currentMapId: 0,\r\n      shownInfoId: null,\r\n      player: player,\r\n      movementEnabled: true\r\n      //shownMap\r\n    };\r\n  }\r\n\r\n  initialState.maps[0].land[initialState.player.coords.y][\r\n    initialState.player.coords.x\r\n  ].occupied = \"player\";\r\n\r\n  initialState.shownMap = generateShownMap(initialState);\r\n\r\n  return initialState;\r\n};\r\n\r\nfunction reducer(state = initializeState(), action) {\r\n  /*\r\n    @params:  the map, including enemies data\r\n              the moving entity\r\n              the key pressed (or simulated) to move the entity\r\n              newPlayer is needed if entity is not the player to allow for a battle, \r\n                as the playier is not included in the map parameter\r\n\r\n    @return:  gamestate, can be \"playing\", \"Game Over\" or \"Victory\"\r\n  */\r\n  let moveEntity = (map, entity, key, newPlayer) => {\r\n    let newX = entity.coords.x;\r\n    let newY = entity.coords.y;\r\n    if (!newPlayer && !entity.id === \"player\") {\r\n      throw new Error(\r\n        \"moveEntity needs a newPlayer argument if entity is not the player\"\r\n      );\r\n    }\r\n    switch (key) {\r\n      case \"ArrowLeft\":\r\n        if (newX <= 0) return \"playing\";\r\n        newX--;\r\n        break;\r\n      case \"ArrowUp\":\r\n        if (newY <= 0) return \"playing\";\r\n        newY--;\r\n        break;\r\n      case \"ArrowRight\":\r\n        if (newX >= map.land[0].length - 1) return \"playing\";\r\n        newX++;\r\n        break;\r\n      case \"ArrowDown\":\r\n        if (newY >= map.land.length - 1) return \"playing\";\r\n        newY++;\r\n        break;\r\n      default:\r\n        return \"playing\";\r\n    }\r\n\r\n    if (!map.land[newY][newX].canMoveThrough) return \"playing\";\r\n\r\n    let battle = (entity, enemy) => {\r\n      let health = entity.health;\r\n      let enemyHealth = enemy.health;\r\n      let dmg1 = entity.atk - enemy.def;\r\n      if (dmg1 < 0) dmg1 = 0;\r\n      let dmg2 = enemy.atk - entity.def;\r\n      if (dmg2 < 0) dmg2 = 0;\r\n\r\n      while (health > 0) {\r\n        enemyHealth -= dmg1;\r\n        if (enemyHealth > 0) {\r\n          health -= dmg2;\r\n        } else {\r\n          return {\r\n            won: true,\r\n            health: health,\r\n            enemyHealth: 0\r\n          };\r\n        }\r\n      }\r\n      return {\r\n        won: false,\r\n        health: 0,\r\n        enemyHealth: enemyHealth\r\n      };\r\n    };\r\n\r\n    if (map.land[newY][newX].hasOwnProperty(\"occupied\")) {\r\n      let adversary;\r\n      let adversaryId = map.land[newY][newX].occupied;\r\n      if (adversaryId == \"player\") {\r\n        adversary = newPlayer;\r\n      } else {\r\n        adversary = map.enemies[adversaryId];\r\n      }\r\n      let result = battle(entity, adversary);\r\n      if (\r\n        (!result.won && entity.id == \"player\") ||\r\n        (result.won && adversary.id == \"player\")\r\n      ) {\r\n        return \"Game Over\"; //!TODO: remove and to add a game over screen\r\n      } else {\r\n        if (entity.id == \"player\") {\r\n          entity.health = result.health;\r\n          entity.exp += map.enemies[adversary.id].expBounty;\r\n          let expCap = entity.lvl * 100;\r\n          while (entity.exp > expCap) {\r\n            entity.exp -= expCap;\r\n            entity.lvl++;\r\n            entity.atk++;\r\n            entity.def++;\r\n            expCap += 100;\r\n          }\r\n          map.enemies[adversary.id] = \"dead\";\r\n\r\n          map.land[newY][newX].occupied =\r\n            map.land[entity.coords.y][entity.coords.x].occupied;\r\n          delete map.land[entity.coords.y][entity.coords.x].occupied;\r\n\r\n          entity.coords.x = newX;\r\n          entity.coords.y = newY;\r\n        } else {\r\n          adversary.health = result.enemyHealth;\r\n          adversary.exp += map.enemies[entity.id].expBounty;\r\n          let expCap = adversary.lvl * 100;\r\n          while (adversary.exp > expCap) {\r\n            adversary.exp -= expCap;\r\n            adversary.lvl++;\r\n            adversary.atk++;\r\n            adversary.def++;\r\n            expCap += 100;\r\n          }\r\n          map.enemies[entity.id] = \"dead\";\r\n          delete map.land[entity.coords.y][entity.coords.x].occupied;\r\n        }\r\n        for (let enemy of map.enemies) {\r\n          if (enemy !== \"dead\") return \"playing\";\r\n        }\r\n        return \"Victory\";\r\n      }\r\n    } else {\r\n      map.land[newY][newX].occupied =\r\n        map.land[entity.coords.y][entity.coords.x].occupied;\r\n      delete map.land[entity.coords.y][entity.coords.x].occupied;\r\n\r\n      entity.coords.x = newX;\r\n      entity.coords.y = newY;\r\n    }\r\n    return \"playing\";\r\n  };\r\n\r\n  switch (action.type) {\r\n    case \"KEYDOWN\": {\r\n      if (state.gameState !== \"playing\") return state;\r\n      let newGameState = state.gameState;\r\n      let newMaps = JSON.parse(JSON.stringify(state.maps));\r\n      let map = newMaps[state.currentMapId];\r\n      let newPlayer = Object.assign({}, state.player);\r\n\r\n      newGameState = moveEntity(map, newPlayer, action.key);\r\n\r\n      let newState = {\r\n        gameState: newGameState,\r\n        maps: newMaps,\r\n        squareSize: state.squareSize,\r\n        viewRange: state.viewRange,\r\n        currentMapId: state.currentMapId,\r\n        player: newPlayer,\r\n        shownInfoId: state.shownInfoId,\r\n        movementEnabled: false\r\n      };\r\n      newState.shownMap = generateShownMap(newState);\r\n\r\n      return newState;\r\n    }\r\n    case \"ENEMYTURN\": {\r\n      if (state.gameState !== \"playing\") return state;\r\n      let newGameState = state.gameState;\r\n      let newMaps = JSON.parse(JSON.stringify(state.maps));\r\n      let map = newMaps[state.currentMapId];\r\n      let newPlayer = Object.assign({}, state.player);\r\n\r\n      map.enemies.forEach(enemy => {\r\n        if (enemy !== \"dead\") {\r\n          let path = pathFinder(map.land, enemy.coords, newPlayer.coords, 5);\r\n          if (path) {\r\n            newGameState = moveEntity(map, enemy, path[0], newPlayer);\r\n          }\r\n        }\r\n      });\r\n\r\n      let newState = {\r\n        gameState: newGameState,\r\n        maps: newMaps,\r\n        squareSize: state.squareSize,\r\n        viewRange: state.viewRange,\r\n        currentMapId: state.currentMapId,\r\n        player: newPlayer,\r\n        shownInfoId: state.shownInfoId,\r\n        movementEnabled: true\r\n      };\r\n      newState.shownMap = generateShownMap(newState);\r\n\r\n      return newState;\r\n    }\r\n    case \"SHOWINFO\": {\r\n      let newState = {\r\n        gameState: state.gameState,\r\n        maps: state.maps,\r\n        squareSize: state.squareSize,\r\n        viewRange: state.viewRange,\r\n        currentMapId: state.currentMapId,\r\n        player: state.player,\r\n        shownMap: state.shownMap,\r\n        shownInfoId: action.id,\r\n        movementEnabled: state.movementEnabled\r\n      };\r\n      return newState;\r\n    }\r\n    case \"\": {\r\n      let newState = {\r\n        gameState: state.gameState,\r\n        maps: state.maps,\r\n        squareSize: state.squareSize,\r\n        viewRange: state.viewRange,\r\n        currentMapId: state.currentMapId,\r\n        player: state.player,\r\n        shownMap: state.shownMap,\r\n        shownInfoId: state.shownInfoId,\r\n        movementEnabled: state.movementEnabled\r\n      };\r\n      return newState;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import React from \"react\";\r\nimport \"./css/App.css\";\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport Map from \"./Map\";\r\nimport ShownEntities from \"./EntityInfo\";\r\nimport EndScreen from \"./EndScreen\";\r\nimport Tutorial from \"./Tutorial\";\r\nimport reducer from \"./reducer\"\r\n\r\n/*TODO:\r\n  \r\n*/\r\n\r\nconst store = createStore(reducer);\r\n\r\nconst App = () => (\r\n  <Provider store={store}>\r\n    <div className=\"App\">\r\n      <EndScreen />\r\n      <ShownEntities />\r\n      <Map />\r\n      <Tutorial/>\r\n    </div>\r\n  </Provider>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}